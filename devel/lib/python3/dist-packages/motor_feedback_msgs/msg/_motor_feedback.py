# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from motor_feedback_msgs/motor_feedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class motor_feedback(genpy.Message):
  _md5sum = "539722cb0cad3c3a79793c39ccbe611c"
  _type = "motor_feedback_msgs/motor_feedback"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
int32 positionL
int32 positionR
int32 AvelocityL
int32 AvelocityR
int32 DvelocityL
int32 DvelocityR
float64 AvelocityL_lpf
float64 AvelocityL_M
float64 AvelocityR_lpf
float64 AvelocityR_M
float64 vx
float64 vy
float64 vth
float64 delta_x
float64 delta_y
float64 delta_th
float64 x
float64 y
float64 th
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','positionL','positionR','AvelocityL','AvelocityR','DvelocityL','DvelocityR','AvelocityL_lpf','AvelocityL_M','AvelocityR_lpf','AvelocityR_M','vx','vy','vth','delta_x','delta_y','delta_th','x','y','th']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,positionL,positionR,AvelocityL,AvelocityR,DvelocityL,DvelocityR,AvelocityL_lpf,AvelocityL_M,AvelocityR_lpf,AvelocityR_M,vx,vy,vth,delta_x,delta_y,delta_th,x,y,th

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motor_feedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.positionL is None:
        self.positionL = 0
      if self.positionR is None:
        self.positionR = 0
      if self.AvelocityL is None:
        self.AvelocityL = 0
      if self.AvelocityR is None:
        self.AvelocityR = 0
      if self.DvelocityL is None:
        self.DvelocityL = 0
      if self.DvelocityR is None:
        self.DvelocityR = 0
      if self.AvelocityL_lpf is None:
        self.AvelocityL_lpf = 0.
      if self.AvelocityL_M is None:
        self.AvelocityL_M = 0.
      if self.AvelocityR_lpf is None:
        self.AvelocityR_lpf = 0.
      if self.AvelocityR_M is None:
        self.AvelocityR_M = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vth is None:
        self.vth = 0.
      if self.delta_x is None:
        self.delta_x = 0.
      if self.delta_y is None:
        self.delta_y = 0.
      if self.delta_th is None:
        self.delta_th = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.th is None:
        self.th = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.positionL = 0
      self.positionR = 0
      self.AvelocityL = 0
      self.AvelocityR = 0
      self.DvelocityL = 0
      self.DvelocityR = 0
      self.AvelocityL_lpf = 0.
      self.AvelocityL_M = 0.
      self.AvelocityR_lpf = 0.
      self.AvelocityR_M = 0.
      self.vx = 0.
      self.vy = 0.
      self.vth = 0.
      self.delta_x = 0.
      self.delta_y = 0.
      self.delta_th = 0.
      self.x = 0.
      self.y = 0.
      self.th = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i13d().pack(_x.positionL, _x.positionR, _x.AvelocityL, _x.AvelocityR, _x.DvelocityL, _x.DvelocityR, _x.AvelocityL_lpf, _x.AvelocityL_M, _x.AvelocityR_lpf, _x.AvelocityR_M, _x.vx, _x.vy, _x.vth, _x.delta_x, _x.delta_y, _x.delta_th, _x.x, _x.y, _x.th))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.positionL, _x.positionR, _x.AvelocityL, _x.AvelocityR, _x.DvelocityL, _x.DvelocityR, _x.AvelocityL_lpf, _x.AvelocityL_M, _x.AvelocityR_lpf, _x.AvelocityR_M, _x.vx, _x.vy, _x.vth, _x.delta_x, _x.delta_y, _x.delta_th, _x.x, _x.y, _x.th,) = _get_struct_6i13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6i13d().pack(_x.positionL, _x.positionR, _x.AvelocityL, _x.AvelocityR, _x.DvelocityL, _x.DvelocityR, _x.AvelocityL_lpf, _x.AvelocityL_M, _x.AvelocityR_lpf, _x.AvelocityR_M, _x.vx, _x.vy, _x.vth, _x.delta_x, _x.delta_y, _x.delta_th, _x.x, _x.y, _x.th))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.positionL, _x.positionR, _x.AvelocityL, _x.AvelocityR, _x.DvelocityL, _x.DvelocityR, _x.AvelocityL_lpf, _x.AvelocityL_M, _x.AvelocityR_lpf, _x.AvelocityR_M, _x.vx, _x.vy, _x.vth, _x.delta_x, _x.delta_y, _x.delta_th, _x.x, _x.y, _x.th,) = _get_struct_6i13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6i13d = None
def _get_struct_6i13d():
    global _struct_6i13d
    if _struct_6i13d is None:
        _struct_6i13d = struct.Struct("<6i13d")
    return _struct_6i13d
