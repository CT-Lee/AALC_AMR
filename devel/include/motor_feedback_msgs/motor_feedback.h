// Generated by gencpp from file motor_feedback_msgs/motor_feedback.msg
// DO NOT EDIT!


#ifndef MOTOR_FEEDBACK_MSGS_MESSAGE_MOTOR_FEEDBACK_H
#define MOTOR_FEEDBACK_MSGS_MESSAGE_MOTOR_FEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace motor_feedback_msgs
{
template <class ContainerAllocator>
struct motor_feedback_
{
  typedef motor_feedback_<ContainerAllocator> Type;

  motor_feedback_()
    : header()
    , positionL(0)
    , positionR(0)
    , AvelocityL(0)
    , AvelocityR(0)
    , DvelocityL(0)
    , DvelocityR(0)
    , AvelocityL_lpf(0.0)
    , AvelocityL_M(0.0)
    , AvelocityR_lpf(0.0)
    , AvelocityR_M(0.0)
    , vx(0.0)
    , vy(0.0)
    , vth(0.0)
    , delta_x(0.0)
    , delta_y(0.0)
    , delta_th(0.0)
    , x(0.0)
    , y(0.0)
    , th(0.0)  {
    }
  motor_feedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , positionL(0)
    , positionR(0)
    , AvelocityL(0)
    , AvelocityR(0)
    , DvelocityL(0)
    , DvelocityR(0)
    , AvelocityL_lpf(0.0)
    , AvelocityL_M(0.0)
    , AvelocityR_lpf(0.0)
    , AvelocityR_M(0.0)
    , vx(0.0)
    , vy(0.0)
    , vth(0.0)
    , delta_x(0.0)
    , delta_y(0.0)
    , delta_th(0.0)
    , x(0.0)
    , y(0.0)
    , th(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _positionL_type;
  _positionL_type positionL;

   typedef int32_t _positionR_type;
  _positionR_type positionR;

   typedef int32_t _AvelocityL_type;
  _AvelocityL_type AvelocityL;

   typedef int32_t _AvelocityR_type;
  _AvelocityR_type AvelocityR;

   typedef int32_t _DvelocityL_type;
  _DvelocityL_type DvelocityL;

   typedef int32_t _DvelocityR_type;
  _DvelocityR_type DvelocityR;

   typedef double _AvelocityL_lpf_type;
  _AvelocityL_lpf_type AvelocityL_lpf;

   typedef double _AvelocityL_M_type;
  _AvelocityL_M_type AvelocityL_M;

   typedef double _AvelocityR_lpf_type;
  _AvelocityR_lpf_type AvelocityR_lpf;

   typedef double _AvelocityR_M_type;
  _AvelocityR_M_type AvelocityR_M;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _vth_type;
  _vth_type vth;

   typedef double _delta_x_type;
  _delta_x_type delta_x;

   typedef double _delta_y_type;
  _delta_y_type delta_y;

   typedef double _delta_th_type;
  _delta_th_type delta_th;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _th_type;
  _th_type th;





  typedef boost::shared_ptr< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> const> ConstPtr;

}; // struct motor_feedback_

typedef ::motor_feedback_msgs::motor_feedback_<std::allocator<void> > motor_feedback;

typedef boost::shared_ptr< ::motor_feedback_msgs::motor_feedback > motor_feedbackPtr;
typedef boost::shared_ptr< ::motor_feedback_msgs::motor_feedback const> motor_feedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator1> & lhs, const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.positionL == rhs.positionL &&
    lhs.positionR == rhs.positionR &&
    lhs.AvelocityL == rhs.AvelocityL &&
    lhs.AvelocityR == rhs.AvelocityR &&
    lhs.DvelocityL == rhs.DvelocityL &&
    lhs.DvelocityR == rhs.DvelocityR &&
    lhs.AvelocityL_lpf == rhs.AvelocityL_lpf &&
    lhs.AvelocityL_M == rhs.AvelocityL_M &&
    lhs.AvelocityR_lpf == rhs.AvelocityR_lpf &&
    lhs.AvelocityR_M == rhs.AvelocityR_M &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vth == rhs.vth &&
    lhs.delta_x == rhs.delta_x &&
    lhs.delta_y == rhs.delta_y &&
    lhs.delta_th == rhs.delta_th &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.th == rhs.th;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator1> & lhs, const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motor_feedback_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "539722cb0cad3c3a79793c39ccbe611c";
  }

  static const char* value(const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x539722cb0cad3c3aULL;
  static const uint64_t static_value2 = 0x79793c39ccbe611cULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_feedback_msgs/motor_feedback";
  }

  static const char* value(const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int32 positionL\n"
"int32 positionR\n"
"int32 AvelocityL\n"
"int32 AvelocityR\n"
"int32 DvelocityL\n"
"int32 DvelocityR\n"
"float64 AvelocityL_lpf\n"
"float64 AvelocityL_M\n"
"float64 AvelocityR_lpf\n"
"float64 AvelocityR_M\n"
"float64 vx\n"
"float64 vy\n"
"float64 vth\n"
"float64 delta_x\n"
"float64 delta_y\n"
"float64 delta_th\n"
"float64 x\n"
"float64 y\n"
"float64 th\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.positionL);
      stream.next(m.positionR);
      stream.next(m.AvelocityL);
      stream.next(m.AvelocityR);
      stream.next(m.DvelocityL);
      stream.next(m.DvelocityR);
      stream.next(m.AvelocityL_lpf);
      stream.next(m.AvelocityL_M);
      stream.next(m.AvelocityR_lpf);
      stream.next(m.AvelocityR_M);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vth);
      stream.next(m.delta_x);
      stream.next(m.delta_y);
      stream.next(m.delta_th);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.th);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_feedback_msgs::motor_feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_feedback_msgs::motor_feedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "positionL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.positionL);
    s << indent << "positionR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.positionR);
    s << indent << "AvelocityL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AvelocityL);
    s << indent << "AvelocityR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AvelocityR);
    s << indent << "DvelocityL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DvelocityL);
    s << indent << "DvelocityR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.DvelocityR);
    s << indent << "AvelocityL_lpf: ";
    Printer<double>::stream(s, indent + "  ", v.AvelocityL_lpf);
    s << indent << "AvelocityL_M: ";
    Printer<double>::stream(s, indent + "  ", v.AvelocityL_M);
    s << indent << "AvelocityR_lpf: ";
    Printer<double>::stream(s, indent + "  ", v.AvelocityR_lpf);
    s << indent << "AvelocityR_M: ";
    Printer<double>::stream(s, indent + "  ", v.AvelocityR_M);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "vth: ";
    Printer<double>::stream(s, indent + "  ", v.vth);
    s << indent << "delta_x: ";
    Printer<double>::stream(s, indent + "  ", v.delta_x);
    s << indent << "delta_y: ";
    Printer<double>::stream(s, indent + "  ", v.delta_y);
    s << indent << "delta_th: ";
    Printer<double>::stream(s, indent + "  ", v.delta_th);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "th: ";
    Printer<double>::stream(s, indent + "  ", v.th);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_FEEDBACK_MSGS_MESSAGE_MOTOR_FEEDBACK_H
