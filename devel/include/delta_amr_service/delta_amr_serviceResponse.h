// Generated by gencpp from file delta_amr_service/delta_amr_serviceResponse.msg
// DO NOT EDIT!


#ifndef DELTA_AMR_SERVICE_MESSAGE_DELTA_AMR_SERVICERESPONSE_H
#define DELTA_AMR_SERVICE_MESSAGE_DELTA_AMR_SERVICERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delta_amr_service
{
template <class ContainerAllocator>
struct delta_amr_serviceResponse_
{
  typedef delta_amr_serviceResponse_<ContainerAllocator> Type;

  delta_amr_serviceResponse_()
    : human_dist(0)
    , robot_running_status(0)  {
    }
  delta_amr_serviceResponse_(const ContainerAllocator& _alloc)
    : human_dist(0)
    , robot_running_status(0)  {
  (void)_alloc;
    }



   typedef int32_t _human_dist_type;
  _human_dist_type human_dist;

   typedef int32_t _robot_running_status_type;
  _robot_running_status_type robot_running_status;





  typedef boost::shared_ptr< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct delta_amr_serviceResponse_

typedef ::delta_amr_service::delta_amr_serviceResponse_<std::allocator<void> > delta_amr_serviceResponse;

typedef boost::shared_ptr< ::delta_amr_service::delta_amr_serviceResponse > delta_amr_serviceResponsePtr;
typedef boost::shared_ptr< ::delta_amr_service::delta_amr_serviceResponse const> delta_amr_serviceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator1> & lhs, const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.human_dist == rhs.human_dist &&
    lhs.robot_running_status == rhs.robot_running_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator1> & lhs, const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delta_amr_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "851a5260ab80914e72bdc2c4ecfd5cca";
  }

  static const char* value(const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x851a5260ab80914eULL;
  static const uint64_t static_value2 = 0x72bdc2c4ecfd5ccaULL;
};

template<class ContainerAllocator>
struct DataType< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delta_amr_service/delta_amr_serviceResponse";
  }

  static const char* value(const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# Response\n"
"\n"
"int32 human_dist\n"
"\n"
"int32 robot_running_status\n"
"\n"
;
  }

  static const char* value(const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.human_dist);
      stream.next(m.robot_running_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct delta_amr_serviceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delta_amr_service::delta_amr_serviceResponse_<ContainerAllocator>& v)
  {
    s << indent << "human_dist: ";
    Printer<int32_t>::stream(s, indent + "  ", v.human_dist);
    s << indent << "robot_running_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_running_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELTA_AMR_SERVICE_MESSAGE_DELTA_AMR_SERVICERESPONSE_H
