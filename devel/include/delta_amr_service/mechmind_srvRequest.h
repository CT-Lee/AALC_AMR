// Generated by gencpp from file delta_amr_service/mechmind_srvRequest.msg
// DO NOT EDIT!


#ifndef DELTA_AMR_SERVICE_MESSAGE_MECHMIND_SRVREQUEST_H
#define DELTA_AMR_SERVICE_MESSAGE_MECHMIND_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delta_amr_service
{
template <class ContainerAllocator>
struct mechmind_srvRequest_
{
  typedef mechmind_srvRequest_<ContainerAllocator> Type;

  mechmind_srvRequest_()
    : img_process_type_mechmind()  {
    }
  mechmind_srvRequest_(const ContainerAllocator& _alloc)
    : img_process_type_mechmind(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _img_process_type_mechmind_type;
  _img_process_type_mechmind_type img_process_type_mechmind;





  typedef boost::shared_ptr< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct mechmind_srvRequest_

typedef ::delta_amr_service::mechmind_srvRequest_<std::allocator<void> > mechmind_srvRequest;

typedef boost::shared_ptr< ::delta_amr_service::mechmind_srvRequest > mechmind_srvRequestPtr;
typedef boost::shared_ptr< ::delta_amr_service::mechmind_srvRequest const> mechmind_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator1> & lhs, const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.img_process_type_mechmind == rhs.img_process_type_mechmind;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator1> & lhs, const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delta_amr_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "023ff47aa255851e90471aa3da084720";
  }

  static const char* value(const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x023ff47aa255851eULL;
  static const uint64_t static_value2 = 0x90471aa3da084720ULL;
};

template<class ContainerAllocator>
struct DataType< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delta_amr_service/mechmind_srvRequest";
  }

  static const char* value(const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Delta_AMR_Service.srv\n"
"# Request\n"
"\n"
"string img_process_type_mechmind \n"
"\n"
;
  }

  static const char* value(const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.img_process_type_mechmind);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mechmind_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delta_amr_service::mechmind_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "img_process_type_mechmind: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.img_process_type_mechmind);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELTA_AMR_SERVICE_MESSAGE_MECHMIND_SRVREQUEST_H
